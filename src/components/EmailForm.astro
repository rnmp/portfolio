---
export interface Props {
  formId?: string;
  class?: string;
}

const { 
  formId = 'nroNgzgsP', 
  class: className = ''
} = Astro.props;
---

<div class={`email-form-container ${className}`}>
  <p>Get notified about new posts</p>
  <form class="email-form" data-form-id={formId}>
    <input 
      type="email" 
      name="email" 
      placeholder="Type your email..." 
      required
      autocomplete="email"
    />
    <button type="submit">Subscribe</button>
  </form>
  <div class="form-status"></div>
</div>

<style>
  .email-form-container {
    max-width: 360px;
    width: 100%;
    margin: 3rem auto 2rem;
  }

  .email-form-container p {
    text-align: center;
    margin: 0 0 1rem 0;
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.8);
  }

  .email-form {
    background-color: rgba(20, 20, 30, 0.4);
    backdrop-filter: blur(12px);
    border-radius: 32px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: row;
    align-items: center;
    padding: 0.5rem;
    gap: 0.5rem;
  }

  .email-form input {
    background-color: transparent;
    border: none;
    padding: 0.75rem 1rem;
    color: white;
    font-size: 0.8rem;
    font-family: inherit;
    flex: 1;
    outline: none;
    width: 100%;
  }

  .email-form input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }



  .email-form button {
    background-color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 24px;
    padding: 0.75rem 1.25rem;
    color: #1a1a2e;
    font-size: 0.8rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    outline: none;
    font-family: inherit;
    white-space: nowrap;
  }

  .email-form button:hover:not(:disabled) {
    background-color: white;
    transform: scale(1.02);
  }

  .email-form button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .form-status {
    font-size: 0.75rem;
    text-align: center;
    min-height: 1.5rem;
    margin-top: 0.75rem;
  }

  .form-status.success {
    color: #4ade80;
  }

  .form-status.error {
    color: #f87171;
  }

  @media (max-width: 512px) {
    .email-form-container {
    margin: 3rem auto 0rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('.email-form');
    
    forms.forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formElement = e.target as HTMLFormElement;
        const submitButton = formElement.querySelector('button[type="submit"]') as HTMLButtonElement;
        const statusDiv = formElement.parentElement?.querySelector('.form-status') as HTMLDivElement;
        const formId = formElement.dataset.formId;
        
        // Get form data
        const formData = new FormData(formElement);
        const data = Object.fromEntries(formData.entries());
        
        // Disable button and show loading state
        submitButton.disabled = true;
        submitButton.textContent = 'Subscribe';
        statusDiv.textContent = '';
        statusDiv.className = 'form-status';
        
        try {
          const response = await fetch(`https://submit-form.com/${formId}`, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });
          
          if (response.ok) {
            statusDiv.textContent = 'Thanks! You\'re now subscribed.';
            statusDiv.classList.add('success');
            formElement.reset();
          } else {
            throw new Error('Failed to subscribe');
          }
        } catch (error) {
          statusDiv.textContent = 'Sorry, something went wrong. Please try again.';
          statusDiv.classList.add('error');
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = 'Subscribe';
        }
      });
    });
  });
</script>
