---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const posts = (await getCollection('blog')).sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
);

---

<Layout title="Typing - Rolando Murillo" description="Blog posts and writings by Rolando Murillo">
  <div class="typing-background">
    <div class="blog-index">
    
    <h2>typingâ€¦</h2>
            <ul class="posts">
      {posts.map((post) => (
                <li>
                  <a href={`/typing/${post.slug}`}>
                    <span class="title">{post.data.title}</span>
                    <time datetime={post.data.date.toISOString()} data-date={post.data.date.toISOString().split('T')[0]}>
                      {post.data.date.toISOString().split('T')[0]}
                    </time>
                  </a>
                </li>
        ))}
            </ul>
  </div>
  </div>
</Layout>

<style>
  .typing-background {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url('/blog-images/typing-background.png');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    overflow-y: auto;
    overflow-x: hidden;
  }

  /* Override the body background from Layout.astro */
  :global(body)::before {
    display: none !important;
  }
  .blog-index {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    min-height: 100vh;
    z-index: 1;
  }

  header {
    margin-bottom: 3rem;
    text-align: center;
    padding: 2rem 1.5rem;
    background-color: rgba(20, 20, 30, 0.4);
    backdrop-filter: blur(12px);
    border-radius: 24px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  h2 {
    font-family: 'Jugendreisen', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 72px;
    margin-bottom: 2rem;
    padding: 1em;
    padding-left: 0;
    color: hsla(49, 100%, 72%, 1.0);
    text-shadow: 
      0 0 20px rgba(255, 229, 114, 0.6), 
      0 0 40px rgba(255, 229, 114, 0.4), 
      0 0 60px rgba(255, 229, 114, 0.3),
      0 0.02em 0 #FFBF45,
      0 8px 16px hsl(239, 23%, 11%);
  }

  .back-link {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.2s;
  }

  .back-link:hover {
    color: white;
  }

  .posts {
    max-width: 756px;
  }

  ul {
    list-style: none;
    padding: 0;
  }

  li {
    margin-bottom: 0.75rem;
  }

  li a {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    padding: 1rem 1.25rem;
    background-color: rgba(20, 20, 30, 0.4);
    backdrop-filter: blur(12px);
    border-radius: 16px;
    text-decoration: none;
    color: white;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
    transition: transform 0.2s cubic-bezier(0.19, 1, 0.22, 1), 
                box-shadow 0.2s cubic-bezier(0.19, 1, 0.22, 1);
  }

  li a:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.4), 0 16px 48px rgba(0, 0, 0, 0.4);
  }

  .title {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 1.1rem;
    flex: 1;
    margin-right: 1rem;
  }

  time {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
    white-space: nowrap;
  }

  @media (max-width: 1200px) {
    h2 {
      font-size: 72px;
    }
  }
  
  @media (max-width: 756px) {
    h2 {
      font-size: 48px;
    }
    .blog-index {
      padding: 1.5rem;
    }
  }
  
  @media (max-width: 512px) {
    h2 {
      font-size: 32px;
      text-align: center;
      padding: 0.5em;
    }
    .blog-index {
      padding: 1rem;
    }
    li a {
      flex-direction: column;
      align-items: flex-start;
    }

    .title {
      margin-bottom: 0.25rem;
    }
  }
</style>

<script>
  function formatRelativeDate(dateStr) {
    // Parse the date string in local timezone
    const [year, month, day] = dateStr.split('-').map(Number);
    const date = new Date(year, month - 1, day);
    const now = new Date();
    
    // Reset time to start of day for accurate day comparison
    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const dateStart = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    
    const diffTime = todayStart - dateStart;
    const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) return 'today';
    if (diffDays === 1) return 'yesterday';
    
    // Check if it's in the same week
    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const dateDay = dateStart.getDay();
    const nowDay = todayStart.getDay();
    
    // Calculate days since last Sunday for both dates
    const dateSinceLastSunday = dateDay;
    const nowSinceLastSunday = nowDay;
    
    // If date is in the current week (and not today/yesterday)
    if (diffDays < 7 && nowSinceLastSunday > dateSinceLastSunday) {
      return `this ${dayNames[dateDay]}`;
    }
    
    // If date is in the previous week
    if (diffDays >= 7 && diffDays < 14) {
      return `last ${dayNames[dateDay]}`;
    }
    
    // If less than 30 days
    if (diffDays < 30) {
      return `${diffDays} days ago`;
    }
    
    // If last month (between 30-60 days ago)
    if (diffDays >= 30 && diffDays < 60) {
      return 'last month';
    }
    
    // Otherwise, return the original format
    return dateStr;
  }
  
  // Apply relative dates on page load
  document.addEventListener('DOMContentLoaded', () => {
    const timeElements = document.querySelectorAll('time[data-date]');
    timeElements.forEach(el => {
      const dateStr = el.getAttribute('data-date');
      if (dateStr) {
        el.textContent = formatRelativeDate(dateStr);
      }
    });
  });
</script>
