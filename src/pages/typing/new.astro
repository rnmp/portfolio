---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="New Post - Rolando Murillo" description="Write a new blog post">
  <div class="typing-background">
    <article class="blog-post">
      <a href="/typing" class="back-link">‚Üê Back to blog</a>
      <header>
        <h1 contenteditable="true" id="post-title" placeholder="Enter your title..."></h1>
        <time id="post-date">{new Date().toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })}</time>
      </header>
      <div class="content" contenteditable="true" id="post-content" placeholder="Start writing..."></div>
      
      <div class="editor-controls">
        <button id="save-post" class="save-button">Publish Post</button>
      </div>
    </article>
  </div>
</Layout>

<style>
  .typing-background {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url('/blog-images/typing-background.png');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    overflow-y: auto;
    overflow-x: hidden;
  }

  /* Override the body background from Layout.astro */
  :global(body)::before {
    display: none !important;
  }

  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    padding: 0.75rem 1.25rem;
    background-color: rgba(20, 20, 30, 0.4);
    backdrop-filter: blur(12px);
    border-radius: 16px;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    font-size: 0.9rem;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
    transition: all 0.2s cubic-bezier(0.19, 1, 0.22, 1);
  }

  .back-link:hover {
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.4), 0 16px 48px rgba(0, 0, 0, 0.4);
  }
  
  .blog-post {
    position: relative;
    max-width: 756px;
    margin: 2rem auto;
    padding: 3rem 2rem;
    min-height: calc(100vh - 4rem);
    z-index: 1;
    background-color: rgba(20, 20, 30, 0.4);
    backdrop-filter: blur(12px);
    border-radius: 32px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  header {
    margin-bottom: 3rem;
    text-align: center;
  }

  h1 {
    font-family: 'Jugendreisen', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: clamp(2rem, 5vw, 3rem);
    line-height: 1.2;
    margin-bottom: 1rem;
    color: white;
    text-shadow: 
      0 0 20px rgba(255, 255, 255, 0.6), 
      0 0 40px rgba(255, 255, 255, 0.4), 
      0 0 60px rgba(255, 255, 255, 0.3),
      0 0.025em 0 hsla(274, 62%, 79%, 1.0),
      0 8px 16px hsl(210, 51%, 5%);
    outline: none;
    min-height: 1.2em;
  }

  h1:empty:before {
    content: attr(placeholder);
    color: rgba(255, 255, 255, 0.3);
  }

  time {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
  }

  .content {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.7;
    color: rgba(255, 255, 255, 0.9);
    outline: none;
    min-height: 300px;
    user-select: text;
    -webkit-user-select: text;
    cursor: text;
  }

  .content:empty:before {
    content: attr(placeholder);
    color: rgba(255, 255, 255, 0.3);
  }

  /* Replicate all the blog post content styles */
  .content h2 {
    font-family: 'Jugendreisen', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 1.8rem;
    margin: 2rem 0 1rem;
    color: white;
    text-shadow: 
      0 0 10px rgba(255, 255, 255, 0.5), 
      0 0 20px rgba(255, 255, 255, 0.3),
      0 4px 8px rgba(0, 0, 0, 0.5);
  }

  .content h3 {
    font-family: 'Jugendreisen', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 1.4rem;
    margin: 1.5rem 0 0.75rem;
    color: white;
    text-shadow: 
      0 0 8px rgba(255, 255, 255, 0.4), 
      0 2px 4px rgba(0, 0, 0, 0.5);
  }

  .content p {
    margin-bottom: 1.5rem;
  }

  .content a {
    color: #6db3f2;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s;
  }

  .content a:hover {
    border-bottom-color: #6db3f2;
  }

  .content blockquote {
    border-left: 3px solid rgba(255, 255, 255, 0.3);
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: rgba(255, 255, 255, 0.7);
  }

  .content code {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-size: 0.9em;
    color: #6db3f2;
  }

  .content pre {
    background: rgba(0, 0, 0, 0.3);
    padding: 1rem;
    border-radius: 5px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .content pre code {
    background: none;
    padding: 0;
    color: rgba(255, 255, 255, 0.9);
  }

  .content img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1.5rem 0;
    display: block;
  }

  .editor-controls {
    margin-top: 3rem;
    display: flex;
    justify-content: center;
  }

  .save-button {
    padding: 1rem 2rem;
    background-color: rgba(109, 179, 242, 0.2);
    color: #6db3f2;
    border: 1px solid #6db3f2;
    border-radius: 16px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.19, 1, 0.22, 1);
    backdrop-filter: blur(12px);
    box-shadow: 0 0 1px rgba(109, 179, 242, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .save-button:hover {
    background-color: rgba(109, 179, 242, 0.3);
    transform: translateY(-2px);
    box-shadow: 0 0 1px rgba(109, 179, 242, 0.4), 0 16px 48px rgba(0, 0, 0, 0.4);
  }

  .save-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  @media (max-width: 756px) {
    .blog-post {
      padding: 2rem 1.5rem;
      margin: 1rem;
      border-radius: 24px;
    }
  }
</style>

<script>
  // Enable text selection for content area
  const content = document.getElementById('post-content');
  const title = document.getElementById('post-title');
  
  // Get local date string in YYYY-MM-DD format
  function getLocalDateString() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
  
  // Image handling
  async function handleImageUpload(file) {
    const formData = new FormData();
    formData.append('image', file);
    formData.append('filename', `upload-${Date.now()}-${file.name}`);
    
    try {
      const response = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) throw new Error('Upload failed');
      
      const data = await response.json();
      return data.url;
    } catch (error) {
      console.error('Image upload error:', error);
      alert('Failed to upload image');
      return null;
    }
  }
  
  // Handle paste events
  content.addEventListener('paste', async (e) => {
    const items = e.clipboardData.items;
    
    for (const item of items) {
      if (item.type.startsWith('image/')) {
        e.preventDefault();
        const file = item.getAsFile();
        const url = await handleImageUpload(file);
        
        if (url) {
          document.execCommand('insertHTML', false, `<img src="${url}" alt="">`);
        }
      }
    }
  });
  
  // Handle drag and drop
  content.addEventListener('dragover', (e) => {
    e.preventDefault();
    content.style.backgroundColor = 'rgba(109, 179, 242, 0.1)';
  });
  
  content.addEventListener('dragleave', (e) => {
    e.preventDefault();
    content.style.backgroundColor = '';
  });
  
  content.addEventListener('drop', async (e) => {
    e.preventDefault();
    content.style.backgroundColor = '';
    
    const files = Array.from(e.dataTransfer.files);
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    
    for (const file of imageFiles) {
      const url = await handleImageUpload(file);
      if (url) {
        document.execCommand('insertHTML', false, `<img src="${url}" alt="">`);
      }
    }
  });
  
  // Save functionality
  document.getElementById('save-post').addEventListener('click', async () => {
    const titleText = title.innerText.trim();
    const contentHtml = content.innerHTML.trim();
    
    if (!titleText || !contentHtml) {
      alert('Please enter both title and content');
      return;
    }
    
    const button = document.getElementById('save-post');
    button.disabled = true;
    button.textContent = 'Publishing...';
    
    try {
      const response = await fetch('/api/save-post', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: titleText,
          content: contentHtml,
          date: getLocalDateString()
        })
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Save failed');
      }
      
      const data = await response.json();
      
      // Give Astro dev server time to pick up the new file
      button.textContent = 'Redirecting...';
      
      // Use setTimeout instead of await to ensure it actually waits
      setTimeout(() => {
        window.location.href = `/typing/${data.slug}`;
      }, 1500);
    } catch (error) {
      console.error('Save error:', error);
      alert('Failed to save post');
      button.disabled = false;
      button.textContent = 'Publish Post';
    }
  });
  
  // Format pasted text to maintain styling
  content.addEventListener('input', () => {
    // Convert div tags to p tags for consistency
    const divs = content.querySelectorAll('div');
    divs.forEach(div => {
      if (div.innerHTML && !div.querySelector('p, h1, h2, h3, h4, h5, h6, pre, blockquote')) {
        const p = document.createElement('p');
        p.innerHTML = div.innerHTML;
        div.replaceWith(p);
      }
    });
  });
</script>
