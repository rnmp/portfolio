---
export interface Props {
  title: string;
  date: Date;
  slug: string;
  description?: string;
  class?: string;
  index?: number;
}

const { title, date, description, slug, class: className, index } = Astro.props;

// Ensure we're working with a Date object
const dateObj = date instanceof Date ? date : new Date(date);

// Format the date using UTC methods to avoid timezone shifts
const formattedDate = dateObj.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  timeZone: 'UTC'
});
---

<article class={`blog-post ${className ?? ''}`} data-index={index ?? 0}>
  <header>
    <h1><a href={`/typing/${slug}`}>{title}</a></h1>
    <time datetime={date.toISOString()}>{formattedDate}</time>
  </header>
  <div class="content">
    <slot />
  </div>
</article>

<div id="lightbox" class="lightbox">
  <img id="lightbox-img" src="" alt="">
  <button id="lightbox-close" class="lightbox-close" aria-label="Close lightbox">

<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
</button>
</div>

<script>
  // Lightbox functionality with FLIP animation
  const lightbox = document.getElementById('lightbox');
  const lightboxImg = document.getElementById('lightbox-img') as HTMLImageElement;
  const lightboxClose = document.getElementById('lightbox-close');
  const contentImages = document.querySelectorAll('.content img') as NodeListOf<HTMLImageElement>;
  
  let activeImage: HTMLImageElement | null = null;
  
  // Add click handlers to all images
  contentImages.forEach(img => {
    img.style.cursor = 'zoom-in';
    img.addEventListener('click', () => {
      activeImage = img;
      openLightbox(img);
    });
  });
  
  function openLightbox(img: HTMLImageElement) {
    if (!lightbox || !lightboxImg) return;
    
    // Get the position of the clicked image
    const imgRect = img.getBoundingClientRect();
    
    // Set the lightbox image source
    lightboxImg.src = img.src;
    lightboxImg.alt = img.alt;
    
    // Make lightbox visible but transparent
    lightbox.style.opacity = '0';
    lightbox.classList.add('active');
    
    // Force layout
    lightbox.offsetHeight;
    
    // Get the final position of the lightbox image
    const lightboxImgRect = lightboxImg.getBoundingClientRect();
    
    // Calculate the scale and translation
    const scaleX = imgRect.width / lightboxImgRect.width;
    const scaleY = imgRect.height / lightboxImgRect.height;
    const translateX = imgRect.left - lightboxImgRect.left;
    const translateY = imgRect.top - lightboxImgRect.top;
    
    // Apply the initial transform
    lightboxImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scaleX}, ${scaleY})`;
    lightboxImg.style.transformOrigin = 'top left';
    
    // Force layout
    lightboxImg.offsetHeight;
    
    // Animate to final position
    lightbox.style.transition = 'opacity 0.3s cubic-bezier(0.19, 1, 0.22, 1)';
    lightboxImg.style.transition = 'transform 0.3s cubic-bezier(0.19, 1, 0.22, 1)';
    
    requestAnimationFrame(() => {
      lightbox.style.opacity = '1';
      lightboxImg.style.transform = 'translate(0, 0) scale(1)';
    });
  }
  
  function closeLightbox() {
    if (!lightbox || !lightboxImg || !activeImage) return;
    
    // Get current positions
    const imgRect = activeImage.getBoundingClientRect();
    const lightboxImgRect = lightboxImg.getBoundingClientRect();
    
    // Calculate the scale and translation for closing
    const scaleX = imgRect.width / lightboxImgRect.width;
    const scaleY = imgRect.height / lightboxImgRect.height;
    const translateX = imgRect.left - lightboxImgRect.left;
    const translateY = imgRect.top - lightboxImgRect.top;
    
    // Animate back to original position
    lightboxImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scaleX}, ${scaleY})`;
    lightbox.style.opacity = '0';
    
    // Remove active class after animation
    setTimeout(() => {
      lightbox.classList.remove('active');
      lightboxImg.style.transform = '';
      lightboxImg.style.transition = '';
      lightbox.style.transition = '';
      lightbox.style.opacity = '';
      activeImage = null;
    }, 300);
  }
  
  // Close lightbox on background click
  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox || e.target === lightboxClose) {
      closeLightbox();
    }
  });
  
  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && lightbox?.classList.contains('active')) {
      closeLightbox();
    }
  });
</script>

<style>
  .blog-post {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
    padding: 3.5rem 2rem 2.5rem;
    background-color: rgba(20, 20, 30, 0.4);
    backdrop-filter: blur(12px);
    border-radius: 32px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  header {
    margin-bottom: 3rem;
    text-align: center;
  }


  header h1 {
    font-family: 'Rubik', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: clamp(2rem, 2.5vw, 3rem);
    line-height: 1.2;
    margin-bottom: 1rem;
    color: white;
    font-weight: 300;
    text-wrap: balance;
  }

  time {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.75rem;
    text-transform: uppercase;
    font-weight: 500;
  }

  .content {
    font-family: 'Rubik', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: rgba(255, 255, 255, 0.9);
    text-wrap: pretty;
  }

  .content > :global(h1),
  .content > :global(h2),
  .content > :global(h3),
  .content > :global(h4) {
    font-weight: 600;
    margin-bottom: -0.75em;
    line-height: 1.25;
  }

  .content > :global(* + *) {
    margin-top: 1.5rem;
  }

  .content :global(li > * + *) {
    margin: 0.5rem 0;
  }

  .content :global(a) {
    color: hsla(49, 100%, 72%, 1.0);
        text-shadow: 
      0 0 20px rgba(255, 229, 114, 0.6), 
      0 0 40px rgba(255, 229, 114, 0.4), 
      0 0 60px rgba(255, 229, 114, 0.3),
      0 0.02em 0 #FFBF45,
      0 8px 16px hsl(239, 23%, 11%);
  }


  .content :global(blockquote) {
    border-left: 3px solid rgba(255, 255, 255, 0.3);
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: rgba(255, 255, 255, 0.7);
  }

  .content :global(code) {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-size: 0.9em;
    color: #6db3f2;
  }

  .content :global(pre) {
    background: rgba(0, 0, 0, 0.3);
    padding: 1rem;
    border-radius: 5px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .content :global(pre code) {
    background: none;
    padding: 0;
    color: rgba(255, 255, 255, 0.9);
  }

  .content :global(img),
  .content :global(video) {
    width: calc(100% + 6rem);
    height: auto;
    border-radius: 16px;
    margin: 2.5rem -3rem;
    display: block;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
    background-color: rgba(20, 20, 30, 0.8);
    backdrop-filter: blur(12px);
  }

  .content :global(small) {
    display: block;
    text-align: center;
    margin-top: -1.5em;
    font-weight: 500;
    opacity: 0.8;
    text-wrap: balance;
  }

  .content :global(ul),
  .content :global(ol) {
    padding-left: 1.5rem;
    /* margin: 1.5rem 0; */
  }

  .content :global(.video-embed) {
    position: relative;
    width: calc(100% + 6rem);
    padding-bottom: calc(56.25% + 3.375rem); /* 16:9 aspect ratio adjusted for width */
    margin: 2.5rem -3rem;
    background-color: rgba(20, 20, 30, 0.8);
    border-radius: 16px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }

  .content :global(.video-embed iframe) {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
  }

  @media (max-width: 756px) {
    .blog-post {
      padding: 3rem 1.5rem 2rem;
      margin: 0 1rem;
      max-width: unset;
      border-radius: 24px;
    }
  }

  @media (max-width: 512px) {
    .blog-post {
      margin: 0;
    }
    .content :global(img),
    .content :global(video) {
      width: calc(100% + 3.5rem);
      margin: 2.5rem -1.75rem;
    }

    .content :global(.video-embed) {
      width: calc(100% + 3.5rem);
      padding-bottom: calc(56.25% + 1.97rem); /* Adjusted for mobile width */
      margin: 2.5rem -1.75rem;
    }
  }

  /* Lightbox styles */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(20, 20, 30, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    z-index: 1000;
    backdrop-filter: blur(24px) saturate(180%);
    -webkit-backdrop-filter: blur(24px) saturate(180%);
  }

  .lightbox.active {
    visibility: visible;
  }

  .lightbox img {
    max-width: 90vw;
    max-height: 90vh;
    width: auto;
    height: auto;
    object-fit: contain;
    border-radius: 16px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
  }

  .lightbox-close {
    position: absolute;
    top: 2rem;
    right: 2rem;
    width: 3rem;
    height: 3rem;
    background-color: rgba(20, 20, 30, 0.4);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border: none;
    border-radius: 24px;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.3), 0 8px 32px rgba(0, 0, 0, 0.3);
    transition: transform 0.2s cubic-bezier(0.19, 1, 0.22, 1), 
                box-shadow 0.2s cubic-bezier(0.19, 1, 0.22, 1);
  }

  .lightbox-close:hover {
    transform: scale(1.08);
    box-shadow: 0 0 1px rgba(255, 255, 255, 0.4), 0 16px 48px rgba(0, 0, 0, 0.5);
  }
  .lightbox-close svg {
    opacity: 0.6;
    width: 1.5rem;
    height: 1.5rem;
    pointer-events: none;
  }

  @media (max-width: 512px) {
    .lightbox img {
      max-width: 100vw;
      max-height: 100vh;
      border-radius: 0;
    }
    
    .lightbox-close {
      top: 1rem;
      right: 1rem;
    }
  }
</style>
